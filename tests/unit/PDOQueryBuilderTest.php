<?php

namespace unit;

use App\Database\PDODatabaseConnection;
use App\Database\PDOQueryBuilder;
use App\Exception\ConfigNotFoundException;
use App\Helper\Config;
use PHPUnit\Framework\TestCase;

class PDOQueryBuilderTest extends TestCase
{
    protected PDOQueryBuilder $queryBuilder;
    protected function setUp(): void
    {

        $config = $this->getConfig();
        $pdoConnection = new PDODatabaseConnection($config);
        $this->queryBuilder = new PDOQueryBuilder($pdoConnection->connection());
        //        $this->queryBuilder->beginTransaction();

        parent::setUp(); // TODO: Change the autogenerated stub
    }

    public function testShouldBeCreateData()
    {
        $result = $this->insertData();
        $this->assertIsInt($result);
        $this->greaterThan(0, $result);
    }

    public function testShouldBeUpdateData()
    {
        $this->insertData();
        $result = $this->queryBuilder->table("bugs")->where("name", "Ali Razavi")->where("email", "ali@gmail.com")->update(["title" => "new title", "email" => "alirazavi@53@gmail.com"]);
        $this->assertIsInt($result);
        $this->assertEquals(1, $result);
    }

    /**
     * @throws ConfigNotFoundException
     */
    private function getConfig()
    {
        return Config::get("database", "pdo_testing");
    }
    private function insertData($option = [])
    {
        $config = $this->getConfig();
        $pdoConnection = new PDODatabaseConnection($config);
        $this->queryBuilder = new PDOQueryBuilder($pdoConnection->connection());
        $data = array_merge([
            "title" => "bug report title",
            "link" => "https://dummy.com",
            "name" => "Ali Razavi",
            "email" => "ali@gmail.com"
        ], $option);
        return $this->queryBuilder->table("bugs")->create($data);
    }

    public function testCanBeDeleteFeild()
    {
        $this->insertData();
        $result = $this->queryBuilder->table("bugs")->where("email", "ali@gmail.com")->where("name", "Ali Razavi")->delete();
        $this->assertIsInt($result);
        $this->assertEquals(1, $result);
    }

    public function testCanBeMultipleWhere()
    {
        $this->insertData();
        $this->insertData(["name" => "Mohammad"]);
        $result = $this->queryBuilder->table("bugs")->where("name", "Mohammad")->update(['name' => "Saman"]);
        $this->assertEquals(1, $result);
    }

    public function testCanBeInsertMultipleData()
    {
        $this->insertMultipleData(10);
        $this->insertMultipleData(10, ["name" => "Mohammad"]);
        $result = $this->queryBuilder->table("bugs")->where("name", "Mohammad")->get();
        $this->assertIsArray($result);
        $this->assertEquals(10, count($result));
    }

    private function insertMultipleData(int $count, $option = [])
    {
        for ($i = 0; $i < $count; $i++) {
            $this->insertData($option);
        }
    }

    public function testCanBeGetColumn()
    {
        $this->insertMultipleData(10);
        $this->insertMultipleData(10, ["name" => "Mohammad"]);
        $result = $this->queryBuilder->table("bugs")->where("name", "Mohammad")->get(['name', 'email']);
        $this->assertIsArray($result);
        $this->assertObjectHasProperty("name", $result[0]);
        $this->assertObjectHasProperty("email", $result[0]);
    }

    public function testShouldBeReturnOneRecord()
    {
        $this->insertMultipleData(10);
        $result = $this->queryBuilder->table("bugs")->where("name", "Ali Razavi")->first();
        $this->assertIsObject($result);
        $this->assertObjectHasProperty("id", $result);
        $this->assertObjectHasProperty("title", $result);
        $this->assertObjectHasProperty("name", $result);
        $this->assertObjectHasProperty("email", $result);
        $this->assertObjectHasProperty("link", $result);
        $this->assertObjectHasProperty("created_at", $result);
        $this->assertObjectHasProperty("updated_at", $result);
    }

    public function testShouldBeReturnOneRecordById()
    {
        $id = $this->insertData(['name' => "Mohammad"]);
        $result = $this->queryBuilder->table("bugs")->find($id);
        $this->assertIsObject($result);

        $this->assertEquals($id, $result->id);
    }
    public function testShouldBeReturnOneRecordFindBy()
    {
        $id = $this->insertData(['name' => "Mohammad"]);
        $result = $this->queryBuilder->table("bugs")->findBy("name", "Mohammad");
        $this->assertIsObject($result);
        $this->assertEquals($id, $result->id);
    }

    public function tearDown(): void
    {
        $this->queryBuilder->trancateAll();
        //
        //        $this->queryBuilder->rollback();

        parent::tearDown();
    }
}
