<?php

namespace funcional;

use App\Database\PDODatabaseConnection;
use App\Database\PDOQueryBuilder;
use App\Exception\ConfigNotFoundException;
use App\Exception\ConfigNotValidException;
use App\Exception\DatabaseConnectionException;
use App\Helper\Config;
use App\Helper\HttpClient;
use GuzzleHttp\Exception\GuzzleException;
use PHPUnit\Framework\TestCase;

class CRUDTest extends TestCase
{

    protected HttpClient | null $client;
    protected PDOQueryBuilder $queryBuilder;

    /**
     * @throws ConfigNotValidException
     * @throws ConfigNotFoundException
     * @throws DatabaseConnectionException
     */
    protected function setUp(): void
    {
        $config = $this->getConfig();
        $pdoConnection = new PDODatabaseConnection($config);
        $this->queryBuilder = new PDOQueryBuilder($pdoConnection->connection());
        $this->client=new HttpClient();
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    /**
     * @throws GuzzleException
     */
    public function testShouldBeCreateDataWithHttpClient()
    {
        $data=[
            "json"=>[
                "name"=>"Sara",
                "email"=>"sara@gmail.com",
                "link"=>"api.com",
                "title"=>"test"
            ]
        ];
        $response=$this->client->post("index.php",$data);
        $this->assertEquals(201,$response->getStatusCode());
        $bug=$this->queryBuilder->table("bugs")->where("name","Sara")->first();
        $this->assertNotNull($bug);
        return $bug;

    }

    /**
     * @depends  testShouldBeCreateDataWithHttpClient
     */

    public function testShouldBeUpdateWithHttpClient($bug)
    {
        $data=[
            "json"=>[
                "id"=>$bug->id,
                "name"=>"update new Sara",
            ]
        ];

        $response=$this->client->put("index.php",$data);
        $this->assertEquals(200,$response->getStatusCode());
        $bug=$this->queryBuilder->table("bugs")
            ->where("name","update new Sara")->first();
        $this->assertNotNull($bug);
    }

    /**
     * @depends  testShouldBeCreateDataWithHttpClient
     * @throws GuzzleException
     */
    public function testShouldBeDeleteWithHttpClient($bug)
    {
        $data=[
            "json"=>[
                "id"=>$bug->id,
            ]
        ];
        $response=$this->client->delete("index.php",$data);
        $this->assertEquals(204,$response->getStatusCode());
        $bug=$this->queryBuilder->table("bugs")->find($bug->id);
        $this->assertFalse($bug);
    }
    /**
     * @depends  testShouldBeCreateDataWithHttpClient
     * @throws GuzzleException
     */
    public function testShouldBeReturnFetchAllDataWithHttpClient($bug)
    {
        $response=$this->client->get("index.php",[
            "json"=>[
                "id"=>$bug->id
            ]
        ]);
        $this->assertEquals(200,$response->getStatusCode());
        $this->assertArrayHasKey("id",json_decode($response->getBody(),true));
    }

    /**
     * @throws ConfigNotFoundException
     */
    private function getConfig(){
        return Config::get("database","pdo_testing");
    }

    protected function tearDown(): void
    {
        $this->client=null;
        parent::tearDown(); // TODO: Change the autogenerated stub
    }

}